{"version":3,"sources":["views/Test.js"],"names":["Wizard","_ref","children","initialValues","onSubmit","stepNumber","setStepNumber","useState","steps","React","Children","toArray","snapshot","setSnapshot","step","totalSteps","length","isLastStep","_jsx","Formik","async","values","bag","props","setTouched","Math","min","next","validationSchema","formik","_jsxs","Form","style","display","onClick","previous","max","type","disabled","isSubmitting","WizardStep","_ref2","Test","email","firstName","lastName","sleep","ms","Promise","resolve","setTimeout","then","console","log","Yup","required","htmlFor","Field","autoComplete","component","id","name","placeholder","ErrorMessage","className"],"mappings":"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","file":"static/js/Test-page.afe6a35d.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport { ErrorMessage, Field, Form, Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\n\r\nconst sleep = ms => new Promise(resolve => setTimeout(resolve, ms));\r\n\r\n// Wizard is a single Formik instance whose children are each page of the\r\n// multi-step form. The form is submitted on each forward transition (can only\r\n// progress with valid input), whereas a backwards step is allowed with\r\n// incomplete data. A snapshot of form state is used as initialValues after each\r\n// transition. Each page has an optional submit handler, and the top-level\r\n// submit is called when the final page is submitted.\r\nconst Wizard = ({ children, initialValues, onSubmit }) => {\r\n  const [stepNumber, setStepNumber] = useState(0);\r\n  const steps = React.Children.toArray(children);\r\n  const [snapshot, setSnapshot] = useState(initialValues);\r\n\r\n  const step = steps[stepNumber];\r\n  const totalSteps = steps.length;\r\n  const isLastStep = stepNumber === totalSteps - 1;\r\n\r\n  const next = values => {\r\n    setSnapshot(values);\r\n    setStepNumber(Math.min(stepNumber + 1, totalSteps - 1));\r\n  };\r\n\r\n  const previous = values => {\r\n    setSnapshot(values);\r\n    setStepNumber(Math.max(stepNumber - 1, 0));\r\n  };\r\n\r\n  const handleSubmit = async (values, bag) => {\r\n    if (step.props.onSubmit) {\r\n      await step.props.onSubmit(values, bag);\r\n    }\r\n    if (isLastStep) {\r\n      return onSubmit(values, bag);\r\n    } else {\r\n      bag.setTouched({});\r\n      next(values);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Formik\r\n      initialValues={snapshot}\r\n      onSubmit={handleSubmit}\r\n      validationSchema={step.props.validationSchema}\r\n    >\r\n      {formik => (\r\n        <Form>\r\n          <p>\r\n            Step {stepNumber + 1} of {totalSteps}\r\n          </p>\r\n          {step}\r\n          <div style={{ display: 'flex' }}>\r\n            {stepNumber > 0 && (\r\n              <button onClick={() => previous(formik.values)} type=\"button\">\r\n                Back\r\n              </button>\r\n            )}\r\n            <div>\r\n              <button disabled={formik.isSubmitting} type=\"submit\">\r\n                {isLastStep ? 'Submit' : 'Next'}\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </Form>\r\n      )}\r\n    </Formik>\r\n  );\r\n};\r\n\r\nconst WizardStep = ({ children }) => children;\r\n\r\nconst Test = () => (\r\n  <div>\r\n    <h1>Formik Multistep Wizard</h1>\r\n    <Wizard\r\n      initialValues={{\r\n        email: '',\r\n        firstName: '',\r\n        lastName: '',\r\n      }}\r\n      onSubmit={async values =>\r\n        sleep(300).then(() => console.log('Wizard submit', values))\r\n      }\r\n    >\r\n      <WizardStep\r\n        onSubmit={() => console.log('Step1 onSubmit')}\r\n        validationSchema={Yup.object({\r\n          firstName: Yup.string().required('required'),\r\n          lastName: Yup.string().required('required'),\r\n        })}\r\n      >\r\n        <div>\r\n          <label htmlFor=\"firstName\">First Name</label>\r\n          <Field\r\n            autoComplete=\"given-name\"\r\n            component=\"input\"\r\n            id=\"firstName\"\r\n            name=\"firstName\"\r\n            placeholder=\"First Name\"\r\n            type=\"text\"\r\n          />\r\n          <ErrorMessage className=\"error\" component=\"div\" name=\"firstName\" />\r\n        </div>\r\n        <div>\r\n          <label htmlFor=\"lastName\">Last Name</label>\r\n          <Field\r\n            autoComplete=\"family-name\"\r\n            component=\"input\"\r\n            id=\"lastName\"\r\n            name=\"lastName\"\r\n            placeholder=\"Last Name\"\r\n            type=\"text\"\r\n          />\r\n          <ErrorMessage className=\"error\" component=\"div\" name=\"lastName\" />\r\n        </div>\r\n      </WizardStep>\r\n      <WizardStep\r\n        onSubmit={() => console.log('Step2 onSubmit')}\r\n        validationSchema={Yup.object({\r\n          email: Yup.string()\r\n            .email('Invalid email address')\r\n            .required('required'),\r\n        })}\r\n      >\r\n        <div>\r\n          <label htmlFor=\"email\">Email</label>\r\n          <Field\r\n            autoComplete=\"email\"\r\n            component=\"input\"\r\n            id=\"email\"\r\n            name=\"email\"\r\n            placeholder=\"Email\"\r\n            type=\"text\"\r\n          />\r\n          <ErrorMessage className=\"error\" component=\"div\" name=\"email\" />\r\n        </div>\r\n      </WizardStep>\r\n    </Wizard>\r\n  </div>\r\n);\r\n\r\nexport default Test;\r\n"],"sourceRoot":""}