{"version":3,"sources":["sass/Reg-form.module.scss","images/icon/google-symbol.svg","views/LogInPage.js"],"names":["module","exports","MyTextInput","label","props","useField","field","meta","className","styles","htmlFor","id","name","touched","error","LogInPage","loc","useLocation","dispatch","useDispatch","search","slice","split","length","searchArr","session","forEach","searchParam","paramArr","match","googleAuth","currentUser","initialValues","email","password","validationSchema","Yup","required","min","onSubmit","values","setSubmitting","resetForm","login","form","type","placeholder","autoComplete","to","routes","forgotten","button","href","serverUrl","src","googleIcon","alt","image","verify"],"mappings":"+GACAA,EAAOC,QAAU,CAAC,kBAAkB,kCAAkC,YAAY,4BAA4B,MAAQ,wBAAwB,OAAS,yBAAyB,aAAa,6BAA6B,gBAAgB,gCAAgC,aAAe,+BAA+B,KAAO,uBAAuB,iBAAiB,iCAAiC,WAAW,2BAA2B,kBAAkB,kCAAkC,aAAa,6BAA6B,oBAAoB,oCAAoC,iBAAiB,iCAAiC,aAAa,6BAA6B,aAAa,6BAA6B,mBAAmB,mCAAmC,YAAY,8B,iCCD7vB,QAA0B,2C,0LCYnCC,EAAc,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAUC,EAAY,iBAC3C,EAAsBC,YAASD,GAA/B,mBAAOE,EAAP,KAAcC,EAAd,KACA,OACE,sBAAKC,UAAWC,IAAO,kBAAvB,UACE,wBAAOD,UAAWC,IAAO,cAAeC,QAASN,EAAMO,IAAMP,EAAMQ,KAAnE,UACGT,EACAI,EAAKM,SAAWN,EAAKO,MACpB,sBAAKN,UAAWC,IAAO,cAAvB,cAAwCF,EAAKO,SAC3C,QAEN,+CAAON,UAAWC,IAAO,eAAmBH,GAAWF,QA0F9CW,UArFG,WAChB,IAAMC,EAAMC,cACNC,EAAWC,cACjB,GAAIH,EAAII,QAAsD,IAA5CJ,EAAII,OAAOC,MAAM,GAAGC,MAAM,OAAOC,OAAc,CAC/D,IAAMC,EAAYR,EAAII,OAAOC,MAAM,GAAGC,MAAM,KACtCG,EAAU,GAChBD,EAAUE,SAAQ,SAAAC,GAChB,IAAMC,EAAWD,EAAYL,MAAM,KAC/BM,EAAS,GAAGC,MAAM,2BAA6BD,EAAS,KAC1DH,EAAQG,EAAS,IAAMA,EAAS,OAKpCV,EAASY,YAAWL,IACpBP,EAASa,eAEX,OACE,cAAC,IAAD,UACE,cAAC,IAAD,CACEC,cAAe,CACbC,MAAO,GACPC,SAAU,IAEZC,iBAAkBC,IAAW,CAC3BH,MAAOG,MACJH,MAAM,+FACNI,SAAS,sEACZH,SAAUE,MAAaE,IAAI,GAAGD,SAAS,wEAEzCE,SAAU,SAACC,EAAD,GAA2C,IAAhCC,EAA+B,EAA/BA,cAAeC,EAAgB,EAAhBA,UAClCxB,EAASyB,YAAMH,IACfC,GAAc,GACdC,KAdJ,SAiBE,eAAC,IAAD,CAAMlC,UAAWC,IAAOmC,KAAxB,UACE,oBAAIpC,UAAWC,IAAO,cAAtB,sCAEA,cAACP,EAAD,CACEC,MAAM,QACNS,KAAK,QACLiC,KAAK,QACLC,YAAY,qBACZC,aAAa,QAGf,cAAC7C,EAAD,CACEC,MAAM,uCACNS,KAAK,WACLiC,KAAK,WACLE,aAAa,QAEf,cAAC,IAAD,CACEC,GAAIC,IAAOC,UACX1C,UAAS,UAAKC,IAAO,aAAZ,YAA4BA,IAAO,qBAF9C,wFAMA,wBACED,UAAS,UAAKC,IAAO0C,OAAZ,YAAsB1C,IAAO,aACtCoC,KAAK,SAFP,sCAMA,oBACEO,KAAI,UAAKH,IAAOI,UAAZ,sBACJ7C,UAAWC,IAAO,mBAFpB,UAIE,qBACE6C,IAAKC,IACLC,IAAI,gBACJhD,UAAS,UAAKC,IAAOgD,MAAZ,YAAqBhD,IAAO,sBAPzC,oEAWA,cAAC,IAAD,CAASuC,GAAIC,IAAOS,OAAQlD,UAAWC,IAAO,aAA9C","file":"static/js/login-page.c2e49e02.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"google-reg-link\":\"Reg-form_google-reg-link__2QOJQ\",\"form-link\":\"Reg-form_form-link__1lShV\",\"image\":\"Reg-form_image__OuwiR\",\"button\":\"Reg-form_button__3Kz44\",\"form-title\":\"Reg-form_form-title__3AMox\",\"image--margin\":\"Reg-form_image--margin__1OcBr\",\"button__icon\":\"Reg-form_button__icon__1Adkp\",\"form\":\"Reg-form_form__1OFJW\",\"form-container\":\"Reg-form_form-container__19byQ\",\"form-btn\":\"Reg-form_form-btn__PSCzj\",\"google-reg-icon\":\"Reg-form_google-reg-icon__3eEzH\",\"form-label\":\"Reg-form_form-label__22Ags\",\"form-label__radio\":\"Reg-form_form-label__radio__TV6Kq\",\"form-radio-btn\":\"Reg-form_form-radio-btn__30r_1\",\"form-input\":\"Reg-form_form-input__2dU37\",\"form-error\":\"Reg-form_form-error__2f5Lm\",\"form-link-second\":\"Reg-form_form-link-second__2EJPu\",\"form-desc\":\"Reg-form_form-desc__1eJ1l\"};","export default __webpack_public_path__ + \"static/media/google-symbol.6c5bf786.svg\";","import React from 'react';\nimport { NavLink, useLocation } from 'react-router-dom';\nimport { Formik, Form, useField } from 'formik';\nimport { useDispatch } from 'react-redux';\nimport * as Yup from 'yup';\n\nimport routes from '../routes';\nimport { login, googleAuth, currentUser } from '../redux/auth';\nimport googleIcon from '../images/icon/google-symbol.svg';\nimport styles from '../sass/Reg-form.module.scss';\nimport Container from '../components/Wrappers/Container';\n\nconst MyTextInput = ({ label, ...props }) => {\n  const [field, meta] = useField(props);\n  return (\n    <div className={styles['form-container']}>\n      <label className={styles['form-label']} htmlFor={props.id || props.name}>\n        {label}\n        {meta.touched && meta.error ? (\n          <div className={styles['form-error']}>*{meta.error}</div>\n        ) : null}\n      </label>\n      <input className={styles['form-input']} {...field} {...props} />\n    </div>\n  );\n};\n\nconst LogInPage = () => {\n  const loc = useLocation();\n  const dispatch = useDispatch();\n  if (loc.search && loc.search.slice(1).split(/&|=/).length === 6) {\n    const searchArr = loc.search.slice(1).split('&');\n    const session = {};\n    searchArr.forEach(searchParam => {\n      const paramArr = searchParam.split('=');\n      if (paramArr[0].match(/token|refreshToken|sid/) && paramArr[1]) {\n        session[paramArr[0]] = paramArr[1];\n      } else {\n        return;\n      }\n    });\n    dispatch(googleAuth(session));\n    dispatch(currentUser());\n  }\n  return (\n    <Container>\n      <Formik\n        initialValues={{\n          email: '',\n          password: '',\n        }}\n        validationSchema={Yup.object({\n          email: Yup.string()\n            .email('Указан неверный email')\n            .required('Обязательно'),\n          password: Yup.string().min(6).required('Обязательно'),\n        })}\n        onSubmit={(values, { setSubmitting, resetForm }) => {\n          dispatch(login(values));\n          setSubmitting(false);\n          resetForm();\n        }}\n      >\n        <Form className={styles.form}>\n          <h1 className={styles['form-title']}>Вход</h1>\n\n          <MyTextInput\n            label=\"Email\"\n            name=\"email\"\n            type=\"email\"\n            placeholder=\"user@webstudio.com\"\n            autoComplete=\"off\"\n          />\n\n          <MyTextInput\n            label=\"Пароль\"\n            name=\"password\"\n            type=\"password\"\n            autoComplete=\"off\"\n          />\n          <NavLink\n            to={routes.forgotten}\n            className={`${styles['form-link']} ${styles['form-link-second']}`}\n          >\n            Забыли пароль?\n          </NavLink>\n          <button\n            className={`${styles.button} ${styles['form-btn']}`}\n            type=\"submit\"\n          >\n            Вход\n          </button>\n          <a\n            href={`${routes.serverUrl}/users/google-auth`}\n            className={styles['google-reg-link']}\n          >\n            <img\n              src={googleIcon}\n              alt=\"Google Symbol\"\n              className={`${styles.image} ${styles['google-reg-icon']}`}\n            />\n            Вход через Google\n          </a>\n          <NavLink to={routes.verify} className={styles['form-link']}>\n            Выслать повторно письмо для верификации\n          </NavLink>\n        </Form>\n      </Formik>\n    </Container>\n  );\n};\n\nexport default LogInPage;\n"],"sourceRoot":""}