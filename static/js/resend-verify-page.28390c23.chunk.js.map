{"version":3,"sources":["sass/Reg-form.module.scss","components/EmailForm/EmailForm.js","views/ResendVerifyPage.js"],"names":["module","exports","MyTextInput","_ref","label","props","field","meta","useField","_jsxs","className","styles","children","htmlFor","id","name","touched","error","_jsx","EmailForm","_ref2","title","operationFunc","dispatch","useDispatch","Formik","initialValues","email","validationSchema","Yup","required","onSubmit","values","_ref3","setSubmitting","resetForm","Form","form","type","placeholder","autoComplete","concat","button","ResendVerifyPage","resendVerifyToken"],"mappings":"gHACAA,EAAOC,QAAU,CAAC,kBAAkB,kCAAkC,YAAY,4BAA4B,MAAQ,wBAAwB,OAAS,yBAAyB,aAAa,6BAA6B,gBAAgB,gCAAgC,aAAe,+BAA+B,KAAO,uBAAuB,iBAAiB,iCAAiC,WAAW,2BAA2B,kBAAkB,kCAAkC,aAAa,6BAA6B,oBAAoB,oCAAoC,iBAAiB,iCAAiC,aAAa,6BAA6B,aAAa,6BAA6B,mBAAmB,mCAAmC,YAAY,4B,iICK5wB,MAAMC,EAAcC,IAA0B,IAAzB,MAAEC,KAAUC,GAAOF,EACtC,MAAOG,EAAOC,GAAQC,YAASH,GAC/B,OACEI,eAAA,OAAKC,UAAWC,IAAO,kBAAkBC,SAAA,CACvCH,eAAA,SAAOC,UAAWC,IAAO,cAAeE,QAASR,EAAMS,IAAMT,EAAMU,KAAKH,SAAA,CACrER,EACAG,EAAKS,SAAWT,EAAKU,MACpBR,eAAA,OAAKC,UAAWC,IAAO,cAAcC,SAAA,CAAC,IAAEL,EAAKU,SAC3C,QAENC,cAAA,SAAOR,UAAWC,IAAO,iBAAmBL,KAAWD,MACnD,EA0CKc,MAtCGC,IAA+B,IAA9B,MAAEC,EAAK,cAAEC,GAAeF,EACzC,MAAMG,EAAWC,cACjB,OACEN,cAACO,IAAM,CACLC,cAAe,CACbC,MAAO,IAETC,iBAAkBC,IAAW,CAC3BF,MAAOE,MACJF,MAAM,+FACNG,SAAS,wEAEdC,SAAUA,CAACC,EAAMC,KAAoC,IAAlC,cAAEC,EAAa,UAAEC,GAAWF,EAC7CV,EAASD,EAAcU,IACvBE,GAAc,GACdC,GAAW,EACXvB,SAEFH,eAAC2B,IAAI,CAAC1B,UAAWC,IAAO0B,KAAKzB,SAAA,CAC3BM,cAAA,KAAGR,UAAWC,IAAO,aAAaC,SAAES,IACpCH,cAAChB,EAAW,CACVE,MAAM,QACNW,KAAK,QACLuB,KAAK,QACLC,YAAY,qBACZC,aAAa,QAEftB,cAAA,UACER,UAAS,GAAA+B,OAAK9B,IAAO+B,OAAM,KAAAD,OAAI9B,IAAO,aACtC2B,KAAK,SAAQ1B,SACd,+DAII,C,mCCvDb,kCAYe+B,UATUA,IAErBzB,cAACC,IAAS,CACRE,MAAM,yNACNC,cAAesB,K","file":"static/js/resend-verify-page.28390c23.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"google-reg-link\":\"Reg-form_google-reg-link__GJ9P0\",\"form-link\":\"Reg-form_form-link__2Js7W\",\"image\":\"Reg-form_image__3l5bL\",\"button\":\"Reg-form_button__d3zr6\",\"form-title\":\"Reg-form_form-title__2d0Y8\",\"image--margin\":\"Reg-form_image--margin__1Wb4D\",\"button__icon\":\"Reg-form_button__icon__1mbfR\",\"form\":\"Reg-form_form__1NSwk\",\"form-container\":\"Reg-form_form-container__1G4vN\",\"form-btn\":\"Reg-form_form-btn__3eXvF\",\"google-reg-icon\":\"Reg-form_google-reg-icon__3-GEf\",\"form-label\":\"Reg-form_form-label__3ILZX\",\"form-label__radio\":\"Reg-form_form-label__radio__1RGBJ\",\"form-radio-btn\":\"Reg-form_form-radio-btn__yiqtR\",\"form-input\":\"Reg-form_form-input__3jq5U\",\"form-error\":\"Reg-form_form-error__29_HN\",\"form-link-second\":\"Reg-form_form-link-second__2TAhF\",\"form-desc\":\"Reg-form_form-desc__1dodw\"};","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Formik, Form, useField } from 'formik';\nimport * as Yup from 'yup';\nimport styles from '../../sass/Reg-form.module.scss';\n\nconst MyTextInput = ({ label, ...props }) => {\n  const [field, meta] = useField(props);\n  return (\n    <div className={styles['form-container']}>\n      <label className={styles['form-label']} htmlFor={props.id || props.name}>\n        {label}\n        {meta.touched && meta.error ? (\n          <div className={styles['form-error']}>*{meta.error}</div>\n        ) : null}\n      </label>\n      <input className={styles['form-input']} {...field} {...props} />\n    </div>\n  );\n};\n\nconst EmailForm = ({ title, operationFunc }) => {\n  const dispatch = useDispatch();\n  return (\n    <Formik\n      initialValues={{\n        email: '',\n      }}\n      validationSchema={Yup.object({\n        email: Yup.string()\n          .email('Указан неверный email')\n          .required('Обязательно'),\n      })}\n      onSubmit={(values, { setSubmitting, resetForm }) => {\n        dispatch(operationFunc(values));\n        setSubmitting(false);\n        resetForm();\n      }}\n    >\n      <Form className={styles.form}>\n        <p className={styles['form-desc']}>{title}</p>\n        <MyTextInput\n          label=\"Email\"\n          name=\"email\"\n          type=\"email\"\n          placeholder=\"user@webstudio.com\"\n          autoComplete=\"off\"\n        />\n        <button\n          className={`${styles.button} ${styles['form-btn']}`}\n          type=\"submit\"\n        >\n          Отправить\n        </button>\n      </Form>\n    </Formik>\n  );\n};\n\nexport default EmailForm;\n","import EmailForm from '../components/EmailForm';\nimport { resendVerifyToken } from '../redux/auth/auth-operations';\n\nconst ResendVerifyPage = () => {\n  return (\n    <EmailForm\n      title=\"Выслать повторно письмо для верификации\"\n      operationFunc={resendVerifyToken}\n    />\n  );\n};\n\nexport default ResendVerifyPage;\n"],"sourceRoot":""}