{"version":3,"sources":["components/SettingsList/SettingsList.module.scss","components/SettingsList/SettingsList.js","views/SettingsPage.js"],"names":["module","exports","MyTextInput","_ref","label","props","field","meta","useField","_jsxs","_Fragment","children","className","styles","htmlFor","id","name","_jsx","touched","error","concat","button","type","MyRadioBtn","_ref2","Field","value","MyDownloadInput","_ref3","setFieldValue","fakeField","setFakeField","useState","onChange","e","_e$target","_e$target$files$","currentTarget","files","target","onClick","handleClick","SettingsList","dispatch","useDispatch","Formik","initialValues","firstName","validationSchema","Yup","required","onSubmit","values","_ref4","setSubmitting","resetForm","changeFirstName","Form","form","placeholder","autoComplete","lastName","_ref5","changeLastName","email","_ref6","changeEmail","password","min","_ref7","changePassword","sex","_ref8","changeSex","role","avatar","shape","_ref9","formData","FormData","append","changeAvatar","_ref10","encType","accept","SettingsPage","Container","User","sexRend"],"mappings":"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","file":"static/js/settings-page.bdd604e0.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"SettingsList_button__1uCTB\",\"settings-list\":\"SettingsList_settings-list__24sTK\",\"form-title\":\"SettingsList_form-title__1lnTD\",\"button__icon\":\"SettingsList_button__icon__1Jat7\",\"settings-list-item\":\"SettingsList_settings-list-item__3yiEs\",\"form\":\"SettingsList_form__3CNKJ\",\"form-btn\":\"SettingsList_form-btn__2_ybl\",\"form-container\":\"SettingsList_form-container__2St72\",\"form-label\":\"SettingsList_form-label__1qISP\",\"form-error\":\"SettingsList_form-error__jzrz8\",\"form-input\":\"SettingsList_form-input__1xnNs\",\"form-radio\":\"SettingsList_form-radio__2rGMJ\",\"form-radio-btn\":\"SettingsList_form-radio-btn__1jOXH\",\"input-download\":\"SettingsList_input-download__2LKQL\",\"input-download-fake\":\"SettingsList_input-download-fake__3c9YN\",\"input-download-wrapper\":\"SettingsList_input-download-wrapper__3XdRE\",\"input-download-label\":\"SettingsList_input-download-label__2AmQH\"};","import React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport styles from './SettingsList.module.scss';\nimport { Formik, Form, Field, useField } from 'formik';\nimport * as Yup from 'yup';\n\nimport {\n  changeFirstName,\n  changeLastName,\n  changeEmail,\n  changePassword,\n  changeSex,\n  changeAvatar,\n} from '../../redux/auth';\n\nconst MyTextInput = ({ label, ...props }) => {\n  const [field, meta] = useField(props);\n  return (\n    <>\n      <label className={styles['form-label']} htmlFor={props.id || props.name}>\n        <span>{label}</span>\n        {meta.touched && meta.error ? (\n          <div className={styles['form-error']}>*{meta.error}</div>\n        ) : null}\n      </label>\n      <div className={styles['form-container']}>\n        <input className={styles['form-input']} {...field} {...props} />\n        <button\n          className={`${styles.button} ${styles['form-btn']}`}\n          type=\"submit\"\n        >\n          Иземенить\n        </button>\n      </div>\n    </>\n  );\n};\n\nconst MyRadioBtn = ({ children, ...props }) => {\n  return (\n    <label className={styles['form-radio']}>\n      <Field\n        className={styles['form-radio-btn']}\n        type=\"radio\"\n        value={children === 'мужской' ? 'male' : 'female'}\n        {...props}\n      />\n      {children}\n    </label>\n  );\n};\n\nconst MyDownloadInput = ({ label, setFieldValue, ...props }) => {\n  const [fakeField, setFakeField] = useState(null);\n\n  const handleChange = e => {\n    setFieldValue('avatar', e.currentTarget.files[0]);\n    setFakeField(e?.target?.files[0]?.name);\n  };\n\n  const handleClick = () => {\n    setFakeField(null);\n  };\n\n  return (\n    <div className={styles['input-download-wrapper']}>\n      <input\n        className={styles['input-download']}\n        name=\"file\"\n        type=\"file\"\n        id=\"field__file-2\"\n        {...props}\n        onChange={handleChange}\n      />\n\n      <label className={styles['input-download-label']} htmlFor=\"field__file-2\">\n        {label}\n        <div className={styles['form-container']}>\n          <div className={styles['input-download-fake']}>\n            {fakeField ? fakeField : 'Выбрать файл'}\n          </div>\n          <button\n            className={`${styles.button} ${styles['form-btn']}`}\n            onClick={handleClick}\n            type=\"submit\"\n          >\n            Иземенить\n          </button>\n        </div>\n      </label>\n    </div>\n  );\n};\n\nexport const SettingsList = () => {\n  const dispatch = useDispatch();\n  return (\n    <ul className={`${styles['settings-list']}`}>\n      <li className={`${styles['settings-list-item']}`}>\n        <Formik\n          initialValues={{\n            firstName: '',\n          }}\n          validationSchema={Yup.object({\n            firstName: Yup.string().required('обязательно'),\n          })}\n          onSubmit={(values, { setSubmitting, resetForm }) => {\n            dispatch(changeFirstName(values));\n            setSubmitting(false);\n            resetForm();\n          }}\n        >\n          <Form className={styles.form}>\n            <MyTextInput\n              label=\"Изменить имя\"\n              name=\"firstName\"\n              id=\"firstName\"\n              type=\"text\"\n              placeholder=\"Введите имя\"\n              autoComplete=\"off\"\n            />\n          </Form>\n        </Formik>\n      </li>\n      <li className={`${styles['settings-list-item']}`}>\n        <Formik\n          initialValues={{\n            lastName: '',\n          }}\n          validationSchema={Yup.object({\n            lastName: Yup.string().required('обязательно'),\n          })}\n          onSubmit={(values, { setSubmitting, resetForm }) => {\n            dispatch(changeLastName(values));\n            setSubmitting(false);\n            resetForm();\n          }}\n        >\n          <Form className={styles.form}>\n            <MyTextInput\n              label=\"Изменить фамилию\"\n              name=\"lastName\"\n              id=\"lastName\"\n              type=\"text\"\n              placeholder=\"Введите фамилию\"\n              autoComplete=\"off\"\n            />\n          </Form>\n        </Formik>\n      </li>\n      <li className={`${styles['settings-list-item']}`}>\n        <Formik\n          initialValues={{\n            email: '',\n          }}\n          validationSchema={Yup.object({\n            email: Yup.string()\n              .email('Указан неверный email')\n              .required('обязательно'),\n          })}\n          onSubmit={(values, { setSubmitting, resetForm }) => {\n            dispatch(changeEmail(values));\n            setSubmitting(false);\n            resetForm();\n          }}\n        >\n          <Form className={styles.form}>\n            <MyTextInput\n              label=\"Изменить Email\"\n              name=\"email\"\n              id=\"email\"\n              type=\"email\"\n              placeholder=\"user@webstudio.com\"\n              autoComplete=\"off\"\n            />\n          </Form>\n        </Formik>\n      </li>\n      <li className={`${styles['settings-list-item']}`}>\n        <Formik\n          initialValues={{\n            password: '',\n          }}\n          validationSchema={Yup.object({\n            password: Yup.string().min(6).required('обязательно'),\n          })}\n          onSubmit={(values, { setSubmitting, resetForm }) => {\n            dispatch(changePassword(values));\n            setSubmitting(false);\n            resetForm();\n          }}\n        >\n          <Form className={styles.form}>\n            <MyTextInput\n              label=\"Изменить пароль\"\n              name=\"password\"\n              id=\"password\"\n              type=\"password\"\n              placeholder=\"password\"\n              autoComplete=\"off\"\n            />\n          </Form>\n        </Formik>\n      </li>\n      <li className={`${styles['settings-list-item']}`}>\n        <Formik\n          initialValues={{\n            sex: '',\n          }}\n          validationSchema={Yup.object({\n            sex: Yup.string().required('обязательно'),\n          })}\n          onSubmit={(values, { setSubmitting, resetForm }) => {\n            dispatch(changeSex(values));\n            setSubmitting(false);\n            resetForm();\n          }}\n        >\n          <Form className={styles.form}>\n            <div className={styles['form-label']} id=\"my-radio-group\">\n              Изменить пол\n            </div>\n            <div className={styles['form-container']}>\n              <div role=\"group\" aria-labelledby=\"my-radio-group\">\n                <MyRadioBtn name=\"sex\">мужской</MyRadioBtn>\n                <MyRadioBtn name=\"sex\">женский</MyRadioBtn>\n              </div>\n              <button\n                className={`${styles.button} ${styles['form-btn']}`}\n                type=\"submit\"\n              >\n                Иземенить\n              </button>\n            </div>\n          </Form>\n        </Formik>\n      </li>\n      <li className={`${styles['settings-list-item']}`}>\n        <Formik\n          initialValues={{\n            avatar: '',\n          }}\n          validationSchema={Yup.object().shape({\n            avatar: Yup.mixed().required('обязательно'),\n          })}\n          onSubmit={(values, { setSubmitting, resetForm }) => {\n            const formData = new FormData();\n            formData.append('avatar', values.avatar);\n            dispatch(changeAvatar(formData));\n            setSubmitting(false);\n            resetForm();\n          }}\n        >\n          {({ setFieldValue }) => (\n            <Form encType=\"multipart/form-data\" className={styles.form}>\n              <MyDownloadInput\n                label=\"Иземенить аватар\"\n                name=\"avatar\"\n                accept=\"image/*\"\n                setFieldValue={setFieldValue}\n              />\n            </Form>\n          )}\n        </Formik>\n      </li>\n    </ul>\n  );\n};\n","import { SettingsList } from '../components/SettingsList/SettingsList';\nimport User from '../components/User';\nimport Container from '../components/Wrappers/Container';\n\nconst SettingsPage = () => (\n  <Container type=\"settings\">\n    <User sexRend />\n    <SettingsList />\n  </Container>\n);\n\nexport default SettingsPage;\n"],"sourceRoot":""}