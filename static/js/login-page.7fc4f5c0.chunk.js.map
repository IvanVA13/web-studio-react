{"version":3,"sources":["sass/Reg-form.module.scss","images/icon/google-symbol.svg","views/LogInPage.js"],"names":["module","exports","MyTextInput","_ref","label","props","field","meta","useField","_jsxs","className","styles","children","htmlFor","id","name","touched","error","_jsx","LogInPage","loc","useLocation","dispatch","useDispatch","search","slice","split","length","searchArr","session","forEach","searchParam","paramArr","match","googleAuth","currentUser","Container","Formik","initialValues","email","password","validationSchema","Yup","required","min","onSubmit","values","_ref2","setSubmitting","resetForm","async","login","handleSubmit","Form","form","type","placeholder","autoComplete","NavLink","to","routes","forgotten","concat","button","href","serverUrl","src","googleIcon","alt","image","verify"],"mappings":"+GACAA,EAAOC,QAAU,CAAC,kBAAkB,kCAAkC,YAAY,4BAA4B,MAAQ,wBAAwB,OAAS,yBAAyB,aAAa,6BAA6B,gBAAgB,gCAAgC,aAAe,+BAA+B,KAAO,uBAAuB,iBAAiB,iCAAiC,WAAW,2BAA2B,kBAAkB,kCAAkC,aAAa,6BAA6B,oBAAoB,oCAAoC,iBAAiB,iCAAiC,aAAa,6BAA6B,aAAa,6BAA6B,mBAAmB,mCAAmC,YAAY,4B,mCCD7vB,QAA0B,yC,mCCAzC,mHAYA,MAAMC,EAAcC,IAA0B,IAAzB,MAAEC,KAAUC,GAAOF,EACtC,MAAOG,EAAOC,GAAQC,YAASH,GAC/B,OACEI,eAAA,OAAKC,UAAWC,IAAO,kBAAkBC,SAAA,CACvCH,eAAA,SAAOC,UAAWC,IAAO,cAAeE,QAASR,EAAMS,IAAMT,EAAMU,KAAKH,SAAA,CACrER,EACAG,EAAKS,SAAWT,EAAKU,MACpBR,eAAA,OAAKC,UAAWC,IAAO,cAAcC,SAAA,CAAC,IAAEL,EAAKU,SAC3C,QAENC,cAAA,SAAOR,UAAWC,IAAO,iBAAmBL,KAAWD,MACnD,EA8FKc,UA1FGA,KAChB,MAAMC,EAAMC,cACNC,EAAWC,cAKjB,GAAIH,EAAII,QAAsD,IAA5CJ,EAAII,OAAOC,MAAM,GAAGC,MAAM,OAAOC,OAAc,CAC/D,MAAMC,EAAYR,EAAII,OAAOC,MAAM,GAAGC,MAAM,KACtCG,EAAU,CAAC,EACjBD,EAAUE,SAAQC,IAChB,MAAMC,EAAWD,EAAYL,MAAM,KAC/BM,EAAS,GAAGC,MAAM,2BAA6BD,EAAS,KAC1DH,EAAQG,EAAS,IAAMA,EAAS,GAGlC,IAEFV,EAASY,YAAWL,IACpBP,EAASa,cACX,CACA,OACEjB,cAACkB,IAAS,CAAAxB,SACRM,cAACmB,IAAM,CACLC,cAAe,CACbC,MAAO,GACPC,SAAU,IAEZC,iBAAkBC,IAAW,CAC3BH,MAAOG,MACJH,MAAM,+FACNI,SAAS,sEACZH,SAAUE,MAAaE,IAAI,GAAGD,SAAS,wEAEzCE,SAAUA,CAACC,EAAMC,KAAoC,IAAlC,cAAEC,EAAa,UAAEC,GAAWF,EA/BhCG,iBACb5B,EAAS6B,YAAML,IACrBxB,EAASa,cAAc,EA8BjBiB,CAAaN,GAEbE,GAAc,GACdC,GAAW,EACXrC,SAEFH,eAAC4C,IAAI,CAAC3C,UAAWC,IAAO2C,KAAK1C,SAAA,CAC3BM,cAAA,MAAIR,UAAWC,IAAO,cAAcC,SAAC,6BAErCM,cAAChB,EAAW,CACVE,MAAM,QACNW,KAAK,QACLwC,KAAK,QACLC,YAAY,qBACZC,aAAa,QAGfvC,cAAChB,EAAW,CACVE,MAAM,uCACNW,KAAK,WACLwC,KAAK,WACLE,aAAa,QAEfvC,cAACwC,IAAO,CACNC,GAAIC,IAAOC,UACXnD,UAAS,GAAAoD,OAAKnD,IAAO,aAAY,KAAAmD,OAAInD,IAAO,qBAAsBC,SACnE,+EAGDM,cAAA,UACER,UAAS,GAAAoD,OAAKnD,IAAOoD,OAAM,KAAAD,OAAInD,IAAO,aACtC4C,KAAK,SAAQ3C,SACd,6BAGDH,eAAA,KACEuD,KAAI,GAAAF,OAAKF,IAAOK,UAAS,sBACzBvD,UAAWC,IAAO,mBAAmBC,SAAA,CAErCM,cAAA,OACEgD,IAAKC,IACLC,IAAI,gBACJ1D,UAAS,GAAAoD,OAAKnD,IAAO0D,MAAK,KAAAP,OAAInD,IAAO,sBACrC,oEAGJO,cAACwC,IAAO,CAACC,GAAIC,IAAOU,OAAQ5D,UAAWC,IAAO,aAAaC,SAAC,iOAKtD,C","file":"static/js/login-page.7fc4f5c0.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"google-reg-link\":\"Reg-form_google-reg-link__GJ9P0\",\"form-link\":\"Reg-form_form-link__2Js7W\",\"image\":\"Reg-form_image__3l5bL\",\"button\":\"Reg-form_button__d3zr6\",\"form-title\":\"Reg-form_form-title__2d0Y8\",\"image--margin\":\"Reg-form_image--margin__1Wb4D\",\"button__icon\":\"Reg-form_button__icon__1mbfR\",\"form\":\"Reg-form_form__1NSwk\",\"form-container\":\"Reg-form_form-container__1G4vN\",\"form-btn\":\"Reg-form_form-btn__3eXvF\",\"google-reg-icon\":\"Reg-form_google-reg-icon__3-GEf\",\"form-label\":\"Reg-form_form-label__3ILZX\",\"form-label__radio\":\"Reg-form_form-label__radio__1RGBJ\",\"form-radio-btn\":\"Reg-form_form-radio-btn__yiqtR\",\"form-input\":\"Reg-form_form-input__3jq5U\",\"form-error\":\"Reg-form_form-error__29_HN\",\"form-link-second\":\"Reg-form_form-link-second__2TAhF\",\"form-desc\":\"Reg-form_form-desc__1dodw\"};","export default __webpack_public_path__ + \"static/media/google-symbol.6c5bf786.svg\";","import React from 'react';\r\nimport { NavLink, useLocation } from 'react-router-dom';\r\nimport { Formik, Form, useField } from 'formik';\r\nimport { useDispatch } from 'react-redux';\r\nimport * as Yup from 'yup';\r\n\r\nimport routes from '../routes';\r\nimport { login, googleAuth, currentUser } from '../redux/auth';\r\nimport googleIcon from '../images/icon/google-symbol.svg';\r\nimport styles from '../sass/Reg-form.module.scss';\r\nimport Container from '../components/Wrappers/Container';\r\n\r\nconst MyTextInput = ({ label, ...props }) => {\r\n  const [field, meta] = useField(props);\r\n  return (\r\n    <div className={styles['form-container']}>\r\n      <label className={styles['form-label']} htmlFor={props.id || props.name}>\r\n        {label}\r\n        {meta.touched && meta.error ? (\r\n          <div className={styles['form-error']}>*{meta.error}</div>\r\n        ) : null}\r\n      </label>\r\n      <input className={styles['form-input']} {...field} {...props} />\r\n    </div>\r\n  );\r\n};\r\n\r\nconst LogInPage = () => {\r\n  const loc = useLocation();\r\n  const dispatch = useDispatch();\r\n  const handleSubmit = async values => {\r\n    await dispatch(login(values));\r\n    dispatch(currentUser());\r\n  };\r\n  if (loc.search && loc.search.slice(1).split(/&|=/).length === 6) {\r\n    const searchArr = loc.search.slice(1).split('&');\r\n    const session = {};\r\n    searchArr.forEach(searchParam => {\r\n      const paramArr = searchParam.split('=');\r\n      if (paramArr[0].match(/token|refreshToken|sid/) && paramArr[1]) {\r\n        session[paramArr[0]] = paramArr[1];\r\n      } else {\r\n        return;\r\n      }\r\n    });\r\n    dispatch(googleAuth(session));\r\n    dispatch(currentUser());\r\n  }\r\n  return (\r\n    <Container>\r\n      <Formik\r\n        initialValues={{\r\n          email: '',\r\n          password: '',\r\n        }}\r\n        validationSchema={Yup.object({\r\n          email: Yup.string()\r\n            .email('Указан неверный email')\r\n            .required('Обязательно'),\r\n          password: Yup.string().min(6).required('Обязательно'),\r\n        })}\r\n        onSubmit={(values, { setSubmitting, resetForm }) => {\r\n          handleSubmit(values);\r\n\r\n          setSubmitting(false);\r\n          resetForm();\r\n        }}\r\n      >\r\n        <Form className={styles.form}>\r\n          <h1 className={styles['form-title']}>Вход</h1>\r\n\r\n          <MyTextInput\r\n            label=\"Email\"\r\n            name=\"email\"\r\n            type=\"email\"\r\n            placeholder=\"user@webstudio.com\"\r\n            autoComplete=\"off\"\r\n          />\r\n\r\n          <MyTextInput\r\n            label=\"Пароль\"\r\n            name=\"password\"\r\n            type=\"password\"\r\n            autoComplete=\"off\"\r\n          />\r\n          <NavLink\r\n            to={routes.forgotten}\r\n            className={`${styles['form-link']} ${styles['form-link-second']}`}\r\n          >\r\n            Забыли пароль?\r\n          </NavLink>\r\n          <button\r\n            className={`${styles.button} ${styles['form-btn']}`}\r\n            type=\"submit\"\r\n          >\r\n            Вход\r\n          </button>\r\n          <a\r\n            href={`${routes.serverUrl}/users/google-auth`}\r\n            className={styles['google-reg-link']}\r\n          >\r\n            <img\r\n              src={googleIcon}\r\n              alt=\"Google Symbol\"\r\n              className={`${styles.image} ${styles['google-reg-icon']}`}\r\n            />\r\n            Вход через Google\r\n          </a>\r\n          <NavLink to={routes.verify} className={styles['form-link']}>\r\n            Выслать повторно письмо для верификации\r\n          </NavLink>\r\n        </Form>\r\n      </Formik>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default LogInPage;\r\n"],"sourceRoot":""}